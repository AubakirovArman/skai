import { NextRequest, NextResponse } from 'next/server'
import { alemllm } from '@/lib/alemllm'
import { embeddingClient } from '@/lib/embedding-client'
import { searchVND } from '@/lib/vector-db'

export async function POST(request: NextRequest) {
  try {
    const { documentContent, language = 'ru' } = await request.json()
    
    if (!documentContent || !documentContent.trim()) {
      return NextResponse.json({ error: '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' }, { status: 400 })
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —è–∑—ã–∫–∞
    const validLanguages = ['ru', 'kk', 'en']
    const targetLang = validLanguages.includes(language) ? language : 'ru'
    
    console.log('[VND] üåê Requested language:', language)
    console.log('[VND] üéØ Target language:', targetLang)

    const queryVector = await embeddingClient.embedSingle(documentContent)
    const searchResults = await searchVND(queryVector, { topK: 5, minScore: 0.3, limit: 8 })

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∫–∞–∂–¥–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
    const context = searchResults.map((result, idx) => {
      const textPreview = result.text.length > 800 ? result.text.substring(0, 800) + '...' : result.text
      return `[${idx + 1}] ${result.metadata.docTitle || result.metadata.filename}\n` +
        `–†–∞–∑–¥–µ–ª: ${result.title}\n` +
        `–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ${(result.similarity * 100).toFixed(1)}%\n` +
        `–¢–µ–∫—Å—Ç: ${textPreview}\n`
    }).join('\n---\n')

    console.log('[VND] Context size:', context.length, 'chars')
    console.log('[VND] Document size:', documentContent.length, 'chars')

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞
    const docPreview = documentContent.length > 2000 
      ? documentContent.substring(0, 2000) + '\n...(–¥–æ–∫—É–º–µ–Ω—Ç –æ–±—Ä–µ–∑–∞–Ω)'
      : documentContent

    // –ü—Ä–æ–º–ø—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö
    const languageInstructions = {
      ru: {
        system: `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫ –ø–æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –ê–û ¬´–°–∞–º—Ä—É–∫-“ö–∞–∑—ã–Ω–∞¬ª.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:
**–í–ù–î: –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´:**
**–í–ù–î: –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø:**
**–í–ù–î: –ù–ê–†–£–®–ï–ù–ò–Ø:**
**–í–ù–î: –†–ò–°–ö–ò:**
**–í–ù–î: –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**
**–ò–°–¢–û–ß–ù–ò–ö–ò:**`,
        user: `–ö–æ–Ω—Ç–µ–∫—Å—Ç –í–ù–î:\n${context}\n\n–î–æ–∫—É–º–µ–Ω—Ç:\n${docPreview}\n\n–ê–Ω–∞–ª–∏–∑:`
      },
      kk: {
        system: `–°—ñ–∑ ¬´–°–∞–º“±—Ä—ã“õ-“ö–∞–∑—ã–Ω–∞¬ª –ê“ö –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤—Ç—ñ–∫ “õ“±–∂–∞—Ç—Ç–∞—Ä—ã –±–æ–π—ã–Ω—à–∞ —Å–∞—Ä–∞–ø—à—ã-—Ç–∞–ª–¥–∞—É—à—ã—Å—ã–∑.

–ñ–∞—É–∞–ø “õ“±—Ä—ã–ª—ã–º—ã:
**–Ü–ù“ö: –ù–ï–ì–Ü–ó–ì–Ü “ö–û–†–´–¢–´–ù–î–´–õ–ê–†:**
**–Ü–ù“ö: –°”ò–ô–ö–ï–°–¢–Ü–ö–¢–ï–†:**
**–Ü–ù“ö: –ë“∞–ó–£–®–´–õ–´“ö–¢–ê–†:**
**–Ü–ù“ö: –¢”ò–£–ï–ö–ï–õ–î–ï–†:**
**–Ü–ù“ö: “∞–°–´–ù–´–°–¢–ê–†:**
**–î–ï–†–ï–ö–ö”®–ó–î–ï–†:**`,
        user: `–Ü–ù“ö –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ:\n${context}\n\n“ö“±–∂–∞—Ç:\n${docPreview}\n\n–¢–∞–ª–¥–∞—É:`
      },
      en: {
        system: `You are an expert analyst on corporate documents of JSC "Samruk-Kazyna".

Response structure:
**ICD: KEY FINDINGS:**
**ICD: COMPLIANCE:**
**ICD: VIOLATIONS:**
**ICD: RISKS:**
**ICD: RECOMMENDATIONS:**
**SOURCES:**`,
        user: `ICD context:\n${context}\n\nDocument:\n${docPreview}\n\nAnalysis:`
      }
    }

    const prompts = languageInstructions[targetLang as keyof typeof languageInstructions]
    const systemPrompt = prompts.system
    const userPrompt = prompts.user

    const result = await alemllm.complete(userPrompt, systemPrompt, { max_tokens: 4096, temperature: 0.7 })

    return NextResponse.json({ success: true, result })

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –í–ù–î:', error)
    const msg = error instanceof Error ? error.message : '–û—à–∏–±–∫–∞'
    
    if (msg.includes('Embedding')) return NextResponse.json({ error: '–°–µ—Ä–≤–∏—Å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' }, { status: 503 })
    if (msg.includes('search')) return NextResponse.json({ error: '–û—à–∏–±–∫–∞ –ë–î –í–ù–î' }, { status: 503 })
    if (msg.includes('AlemLLM')) return NextResponse.json({ error: '–û—à–∏–±–∫–∞ AlemLLM' }, { status: 503 })
    
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞' }, { status: 500 })
  }
}
