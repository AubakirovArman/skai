/**
 * TTS API Proxy
 * –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É CORS, –ø—Ä–æ–∫—Å–∏—Ä—É—è –∑–∞–ø—Ä–æ—Å—ã –∫ TTS API
 */

import { NextRequest, NextResponse } from 'next/server'

const TTS_API_URL = process.env.NEXT_PUBLIC_TTS_API_URL || 'https://tts.sk-ai.kz/api/tts'

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { text, lang } = body

    if (!text) {
      return NextResponse.json(
        { error: 'Text is required' },
        { status: 400 }
      )
    }

    console.log('[TTS Proxy] üé§ Generating speech...')
    console.log('[TTS Proxy] üìù Text length:', text.length)
    console.log('[TTS Proxy] üåê Language:', lang || 'ru')

    // –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ TTS API
    const response = await fetch(TTS_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        text,
        lang: lang || 'ru',
      }),
    })

    if (!response.ok) {
      const errorText = await response.text()
      console.error('[TTS Proxy] ‚ùå TTS API error:', errorText)
      return NextResponse.json(
        { error: `TTS API error: ${response.status}` },
        { status: response.status }
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫
    const audioBuffer = await response.arrayBuffer()
    console.log('[TTS Proxy] ‚úÖ Speech generated, size:', audioBuffer.byteLength, 'bytes')

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64 –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è
    const base64Audio = Buffer.from(audioBuffer).toString('base64')
    const audioUrl = `data:audio/mpeg;base64,${base64Audio}`

    return NextResponse.json({
      success: true,
      audioUrl,
    })
  } catch (error) {
    console.error('[TTS Proxy] ‚ùå Error:', error)
    return NextResponse.json(
      { error: 'Failed to generate speech' },
      { status: 500 }
    )
  }
}
