/**
 * API Endpoint –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–∑–≤—É—á–∫–∏ –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö
 * POST /api/admin/virtual-director-settings/generate-audio
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–∑–≤—É—á–∫—É —Å—Ä–∞–∑—É –¥–ª—è –≤—Å–µ—Ö 3 —è–∑—ã–∫–æ–≤ (ru, kk, en)
 */

import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'
import { PrismaClient } from '@prisma/client'
import { prepareTextForTTS } from '@/lib/text-sanitizer'

const prisma = new PrismaClient()

const TTS_API_URL = process.env.NEXT_PUBLIC_TTS_API_URL || 'https://tts.sk-ai.kz/api/tts'

// –ü–µ—Ä–µ–≤–æ–¥—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ä–∞–∑–¥–µ–ª–æ–≤
const sectionTitles = {
  ru: {
    vndKeyFindings: '–í–ù–î: –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´',
    vndCompliance: '–í–ù–î: –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø',
    vndViolations: '–í–ù–î: –ù–ê–†–£–®–ï–ù–ò–Ø',
    vndRisks: '–í–ù–î: –†–ò–°–ö–ò',
    vndRecommendations: '–í–ù–î: –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò',
    sources: '–ò–°–¢–û–ß–ù–ò–ö–ò',
    npaKeyFindings: '–ù–ü–ê: –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´',
    npaCompliance: '–ù–ü–ê: –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø',
    npaViolations: '–ù–ü–ê: –ù–ê–†–£–®–ï–ù–ò–Ø / –†–ò–°–ö –ù–ï–°–û–ë–õ–Æ–î–ï–ù–ò–Ø',
    npaRisks: '–ù–ü–ê: –ü–†–ê–í–û–í–´–ï –†–ò–°–ö–ò',
    npaRecommendations: '–ù–ü–ê: –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –°–û–û–¢–í–ï–¢–°–¢–í–ò–Æ',
    npaSources: '–ò–°–¢–û–ß–ù–ò–ö–ò –ù–ü–ê',
    agendaItem: '–ü–£–ù–ö–¢ –ü–û–í–ï–°–¢–ö–ò –î–ù–Ø',
    decision: '–†–ï–®–ï–ù–ò–ï –ù–ï–ó–ê–í–ò–°–ò–ú–û–ì–û –ß–õ–ï–ù–ê –°–î',
    briefConclusion: '–ö–†–ê–¢–ö–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï',
    reasoning: '–û–ë–û–°–ù–û–í–ê–ù–ò–ï',
    finalConclusion: '–ò–¢–û–ì–û–í–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï'
  },
  kk: {
    vndKeyFindings: '–Ü–ë–ñ: –ù–ï–ì–Ü–ó–ì–Ü “ö–û–†–´–¢–´–ù–î–´–õ–ê–†',
    vndCompliance: '–Ü–ë–ñ: –°”ò–ô–ö–ï–°–¢–Ü–ö–¢–ï–†',
    vndViolations: '–Ü–ë–ñ: –ë“∞–ó–£–®–´–õ–´“ö–¢–ê–†',
    vndRisks: '–Ü–ë–ñ: –¢”ò–£–ï–ö–ï–õ–î–ï–†',
    vndRecommendations: '–Ü–ë–ñ: “∞–°–´–ù–´–ú–î–ê–†',
    sources: '–î–ï–†–ï–ö–ö”®–ó–î–ï–†',
    npaKeyFindings: '“ö“ö–ê: –ù–ï–ì–Ü–ó–ì–Ü “ö–û–†–´–¢–´–ù–î–´–õ–ê–†',
    npaCompliance: '“ö“ö–ê: –°”ò–ô–ö–ï–°–¢–Ü–ö–¢–ï–†',
    npaViolations: '“ö“ö–ê: –ë“∞–ó–£–®–´–õ–´“ö–¢–ê–† / –°”ò–ô–ö–ï–°–°–Ü–ó–î–Ü–ö –¢”ò–£–ï–ö–ï–õ–Ü',
    npaRisks: '“ö“ö–ê: “ö“∞“ö–´“ö–¢–´“ö –¢”ò–£–ï–ö–ï–õ–î–ï–†',
    npaRecommendations: '“ö“ö–ê: –°”ò–ô–ö–ï–°–¢–Ü–ö –ë–û–ô–´–ù–®–ê “∞–°–´–ù–´–ú–î–ê–†',
    npaSources: '“ö“ö–ê –î–ï–†–ï–ö–ö”®–ó–î–ï–†–Ü',
    agendaItem: '–ö“Æ–ù –¢”ò–†–¢–Ü–ë–Ü –¢–ê–†–ú–ê“í–´',
    decision: '–î–ö –¢–ú –®–ï–®–Ü–ú–Ü',
    briefConclusion: '“ö–´–°“ö–ê–®–ê “ö–û–†–´–¢–´–ù–î–´',
    reasoning: '–ù–ï–ì–Ü–ó–î–ï–ú–ï',
    finalConclusion: '“ö–û–†–´–¢–´–ù–î–´ “ö–û–†–´–¢–´–ù–î–´'
  },
  en: {
    vndKeyFindings: 'ICD: KEY FINDINGS',
    vndCompliance: 'ICD: COMPLIANCE',
    vndViolations: 'ICD: VIOLATIONS',
    vndRisks: 'ICD: RISKS',
    vndRecommendations: 'ICD: RECOMMENDATIONS',
    sources: 'SOURCES',
    npaKeyFindings: 'NLA: KEY FINDINGS',
    npaCompliance: 'NLA: COMPLIANCE',
    npaViolations: 'NLA: VIOLATIONS / NON-COMPLIANCE RISK',
    npaRisks: 'NLA: LEGAL RISKS',
    npaRecommendations: 'NLA: COMPLIANCE RECOMMENDATIONS',
    npaSources: 'NLA SOURCES',
    agendaItem: 'AGENDA ITEM',
    decision: 'INDEPENDENT BOARD MEMBER DECISION',
    briefConclusion: 'BRIEF CONCLUSION',
    reasoning: 'JUSTIFICATION',
    finalConclusion: 'FINAL CONCLUSION'
  }
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ TTS API
async function generateAudio(text: string, lang: 'ru' | 'kk' | 'en'): Promise<string> {
  console.log(`[Generate Audio] Generating for ${lang}, text length: ${text.length}`)
  
  const response = await fetch(TTS_API_URL, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      text,
      lang,
    }),
  })

  if (!response.ok) {
    const errorText = await response.text()
    throw new Error(`TTS API error: ${response.status} - ${errorText}`)
  }

  // –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫
  const audioBuffer = await response.arrayBuffer()
  
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64 data URI
  const base64Audio = Buffer.from(audioBuffer).toString('base64')
  const audioUrl = `data:audio/mpeg;base64,${base64Audio}`
  
  console.log(`[Generate Audio] ‚úÖ Generated ${lang} audio, size: ${audioBuffer.byteLength} bytes`)
  
  return audioUrl
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞
async function generateLanguageAudio(demoData: any, lang: 'ru' | 'kk' | 'en') {
  const titles = sectionTitles[lang]
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∫–ª–∞–¥–∫–∏
  const vndText = prepareTextForTTS(`
**${titles.vndKeyFindings}**
${demoData.vndKeyFindings?.[lang] || ''}

**${titles.vndCompliance}**
${demoData.vndCompliance?.[lang] || ''}

**${titles.vndViolations}**
${demoData.vndViolations?.[lang] || ''}

**${titles.vndRisks}**
${demoData.vndRisks?.[lang] || ''}

**${titles.vndRecommendations}**
${demoData.vndRecommendations?.[lang] || ''}

**${titles.sources}**
${demoData.vndSources?.[lang] || ''}
  `.trim(), 5000)

  const npText = prepareTextForTTS(`
**${titles.npaKeyFindings}**
${demoData.npaKeyFindings?.[lang] || ''}

**${titles.npaCompliance}**
${demoData.npaCompliance?.[lang] || ''}

**${titles.npaViolations}**
${demoData.npaViolations?.[lang] || ''}

**${titles.npaRisks}**
${demoData.npaRisks?.[lang] || ''}

**${titles.npaRecommendations}**
${demoData.npaRecommendations?.[lang] || ''}

**${titles.npaSources}**
${demoData.npaSources?.[lang] || ''}
  `.trim(), 5000)

  const summaryText = prepareTextForTTS(`
**${titles.agendaItem}:**
${demoData.agendaItem?.[lang] || ''}

**${titles.decision}:**
${demoData.vote?.[lang] || ''}

**${titles.briefConclusion}:**
${demoData.briefConclusion?.[lang] || ''}

**${titles.reasoning}:**
${demoData.reasoning?.[lang] || ''}

**${titles.finalConclusion}:**
${demoData.finalConclusion?.[lang] || ''}
  `.trim(), 5000)

  console.log(`[Generate Audio API] üìù ${lang.toUpperCase()} text lengths:`, {
    vnd: vndText.length,
    np: npText.length,
    summary: summaryText.length
  })

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥–ª—è –≤—Å–µ—Ö —Ç—Ä—ë—Ö –≤–∫–ª–∞–¥–æ–∫
  const [audioVnd, audioNp, audioSummary] = await Promise.all([
    generateAudio(vndText, lang),
    generateAudio(npText, lang),
    generateAudio(summaryText, lang)
  ])

  return {
    vnd: audioVnd,
    np: audioNp,
    summary: audioSummary,
    sizes: {
      vnd: audioVnd.length,
      np: audioNp.length,
      summary: audioSummary.length
    }
  }
}

export async function POST(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const session = await getServerSession(authOptions)
    if (!session?.user || session.user.role !== 'admin') {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      )
    }

    console.log(`[Generate Audio API] ÔøΩ Starting audio generation for ALL languages (ru, kk, en)`)

    // –ü–æ–ª—É—á–∞–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    const demoDataRecord = await prisma.dialogSettings.findUnique({
      where: { key: 'virtual-director-demo-data' }
    })

    if (!demoDataRecord) {
      console.error('[Generate Audio API] ‚ùå Demo data not found in database')
      return NextResponse.json(
        { 
          error: 'Demo data not found',
          message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏',
          instructions: [
            '1. –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–î–µ–º–æ —Ä–µ–∂–∏–º"',
            '2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –Ω–∞ —Ç—Ä–µ—Ö —è–∑—ã–∫–∞—Ö (ru, kk, en)',
            '3. –ù–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"',
            '4. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º–æ–∂–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–∑–≤—É—á–∫—É'
          ]
        },
        { status: 404 }
      )
    }

    const demoData = JSON.parse(demoDataRecord.value)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—É—Å—Ç—ã–µ
    if (!demoData || Object.keys(demoData).length === 0) {
      console.error('[Generate Audio API] ‚ùå Demo data is empty')
      return NextResponse.json(
        { 
          error: 'Demo data is empty',
          message: '–î–µ–º–æ –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –Ω–æ –ø—É—Å—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∏—Ö –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏'
        },
        { status: 400 }
      )
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ –¥–ª—è –≤—Å–µ—Ö —Ç—Ä—ë—Ö —è–∑—ã–∫–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    console.log('[Generate Audio API] üé¨ Starting parallel generation for all languages...')
    
    const [ruAudio, kkAudio, enAudio] = await Promise.all([
      generateLanguageAudio(demoData, 'ru'),
      generateLanguageAudio(demoData, 'kk'),
      generateLanguageAudio(demoData, 'en')
    ])

    console.log('[Generate Audio API] ‚úÖ All audio generated successfully for all languages')

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ –≤ –ë–î –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
    await Promise.all([
      prisma.dialogSettings.upsert({
        where: { key: 'virtual-director-demo-audio-ru' },
        update: {
          value: JSON.stringify({
            vnd: ruAudio.vnd,
            np: ruAudio.np,
            summary: ruAudio.summary,
            generatedAt: new Date().toISOString()
          })
        },
        create: {
          key: 'virtual-director-demo-audio-ru',
          value: JSON.stringify({
            vnd: ruAudio.vnd,
            np: ruAudio.np,
            summary: ruAudio.summary,
            generatedAt: new Date().toISOString()
          })
        }
      }),
      prisma.dialogSettings.upsert({
        where: { key: 'virtual-director-demo-audio-kk' },
        update: {
          value: JSON.stringify({
            vnd: kkAudio.vnd,
            np: kkAudio.np,
            summary: kkAudio.summary,
            generatedAt: new Date().toISOString()
          })
        },
        create: {
          key: 'virtual-director-demo-audio-kk',
          value: JSON.stringify({
            vnd: kkAudio.vnd,
            np: kkAudio.np,
            summary: kkAudio.summary,
            generatedAt: new Date().toISOString()
          })
        }
      }),
      prisma.dialogSettings.upsert({
        where: { key: 'virtual-director-demo-audio-en' },
        update: {
          value: JSON.stringify({
            vnd: enAudio.vnd,
            np: enAudio.np,
            summary: enAudio.summary,
            generatedAt: new Date().toISOString()
          })
        },
        create: {
          key: 'virtual-director-demo-audio-en',
          value: JSON.stringify({
            vnd: enAudio.vnd,
            np: enAudio.np,
            summary: enAudio.summary,
            generatedAt: new Date().toISOString()
          })
        }
      })
    ])

    console.log(`[Generate Audio API] üíæ Audio saved to DB for all languages`)

    return NextResponse.json({
      success: true,
      message: 'Audio generated and saved successfully for all languages',
      languages: ['ru', 'kk', 'en'],
      sizes: {
        ru: ruAudio.sizes,
        kk: kkAudio.sizes,
        en: enAudio.sizes
      }
    })

  } catch (error) {
    console.error('[Generate Audio API] ‚ùå Error:', error)
    return NextResponse.json(
      { 
        error: 'Failed to generate audio',
        details: error instanceof Error ? error.message : String(error)
      },
      { status: 500 }
    )
  } finally {
    await prisma.$disconnect()
  }
}
