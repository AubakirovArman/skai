/**
 * TTS Audio Preloader
 * Generates audio for all tabs in parallel during document analysis
 */

import { ttsClient } from './tts-client'
import { prepareTextForTTS } from './text-sanitizer'

export interface PreloadResult {
  vnd?: string
  np?: string
  summary?: string
  errors?: {
    vnd?: Error
    np?: Error
    summary?: Error
  }
}

export interface PreloadProgress {
  current: number
  total: number
  step: 'vnd' | 'np' | 'summary' | 'complete'
}

/**
 * Preload TTS audio for all three tabs
 * @param texts - Object with text for each tab
 * @param lang - Language for TTS (kk, ru, or en)
 * @param onProgress - Callback for progress updates
 * @returns Object with audio URLs for each tab
 */
export async function preloadTTSAudio(
  texts: {
    vnd: string
    np: string
    summary: string
  },
  lang: 'kk' | 'ru' | 'en',
  onProgress?: (progress: PreloadProgress) => void
): Promise<PreloadResult> {
  console.log('[TTS Preloader] üé¨ Starting preload for 3 tabs')
  console.log('[TTS Preloader] üåê Language:', lang)

  const result: PreloadResult = {
    errors: {}
  }

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ (–æ—á–∏—Å—Ç–∫–∞ –æ—Ç Markdown)
  const cleanedTexts = {
    vnd: prepareTextForTTS(texts.vnd, 5000),
    np: prepareTextForTTS(texts.np, 5000),
    summary: prepareTextForTTS(texts.summary, 5000)
  }

  console.log('[TTS Preloader] üßπ Cleaned text lengths:', {
    vnd: cleanedTexts.vnd.length,
    np: cleanedTexts.np.length,
    summary: cleanedTexts.summary.length
  })

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥–ª—è –≤—Å–µ—Ö —Ç—Ä—ë—Ö –≤–∫–ª–∞–¥–æ–∫
  const promises = [
    // VND
    (async () => {
      try {
        onProgress?.({ current: 1, total: 3, step: 'vnd' })
        console.log('[TTS Preloader] üé§ Generating VND audio...')
        result.vnd = await ttsClient.generateSpeechURL(cleanedTexts.vnd, lang)
        console.log('[TTS Preloader] ‚úÖ VND audio ready')
      } catch (error) {
        console.error('[TTS Preloader] ‚ùå VND generation failed:', error)
        result.errors!.vnd = error as Error
      }
    })(),

    // Legal (NP)
    (async () => {
      try {
        onProgress?.({ current: 2, total: 3, step: 'np' })
        console.log('[TTS Preloader] üé§ Generating Legal audio...')
        result.np = await ttsClient.generateSpeechURL(cleanedTexts.np, lang)
        console.log('[TTS Preloader] ‚úÖ Legal audio ready')
      } catch (error) {
        console.error('[TTS Preloader] ‚ùå Legal generation failed:', error)
        result.errors!.np = error as Error
      }
    })(),

    // Summary
    (async () => {
      try {
        onProgress?.({ current: 3, total: 3, step: 'summary' })
        console.log('[TTS Preloader] üé§ Generating Summary audio...')
        result.summary = await ttsClient.generateSpeechURL(cleanedTexts.summary, lang)
        console.log('[TTS Preloader] ‚úÖ Summary audio ready')
      } catch (error) {
        console.error('[TTS Preloader] ‚ùå Summary generation failed:', error)
        result.errors!.summary = error as Error
      }
    })()
  ]

  // –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
  await Promise.all(promises)

  onProgress?.({ current: 3, total: 3, step: 'complete' })

  const successCount = [result.vnd, result.np, result.summary].filter(Boolean).length
  console.log('[TTS Preloader] üéâ Preload complete:', successCount, '/ 3 successful')

  // –£–¥–∞–ª—è–µ–º errors –µ—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–æ–∫
  if (Object.keys(result.errors!).length === 0) {
    delete result.errors
  }

  return result
}

/**
 * Revoke all audio URLs to free memory
 */
export function revokeAudioUrls(audioUrls: PreloadResult) {
  console.log('[TTS Preloader] üßπ Revoking audio URLs')
  
  if (audioUrls.vnd) {
    URL.revokeObjectURL(audioUrls.vnd)
  }
  if (audioUrls.np) {
    URL.revokeObjectURL(audioUrls.np)
  }
  if (audioUrls.summary) {
    URL.revokeObjectURL(audioUrls.summary)
  }
}
