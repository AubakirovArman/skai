#!/usr/bin/env node

/**
 * TTS Audio Generator Script
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   node scripts/generate-tts.js <input-file> <language> [output-file]
 * 
 * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
 *   input-file  - –ø—É—Ç—å –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—É —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –æ–∑–≤—É—á–∫–∏
 *   language    - —è–∑—ã–∫ –æ–∑–≤—É—á–∫–∏ (ru, kk, en)
 *   output-file - (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: output.mp3)
 * 
 * –ü—Ä–∏–º–µ—Ä—ã:
 *   node scripts/generate-tts.js text.txt kk
 *   node scripts/generate-tts.js my-text.txt ru my-audio.mp3
 *   node scripts/generate-tts.js document.txt en speech.mp3
 */

const fs = require('fs')
const path = require('path')

// TTS API URL
const TTS_API_URL = 'https://tts.sk-ai.kz/api/tts'

// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏
const SUPPORTED_LANGUAGES = ['ru', 'kk', 'en']

// –¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
}

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`)
}

function showUsage() {
  log('\nüì¢ TTS Audio Generator', 'cyan')
  log('='.repeat(50), 'cyan')
  log('\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:', 'bright')
  log('  node scripts/generate-tts.js <input-file> <language> [output-file]\n')
  log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', 'bright')
  log('  input-file  - –ø—É—Ç—å –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—É —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –æ–∑–≤—É—á–∫–∏')
  log('  language    - —è–∑—ã–∫ –æ–∑–≤—É—á–∫–∏ (ru, kk, en)')
  log('  output-file - (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: output.mp3)\n')
  log('–ü—Ä–∏–º–µ—Ä—ã:', 'bright')
  log('  node scripts/generate-tts.js text.txt kk', 'yellow')
  log('  node scripts/generate-tts.js my-text.txt ru my-audio.mp3', 'yellow')
  log('  node scripts/generate-tts.js document.txt en speech.mp3', 'yellow')
  log('\n' + '=' .repeat(50) + '\n', 'cyan')
}

async function generateTTS(text, language) {
  try {
    log(`\nüé§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ TTS API...`, 'blue')
    log(`   –Ø–∑—ã–∫: ${language}`, 'blue')
    log(`   –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: ${text.length} —Å–∏–º–≤–æ–ª–æ–≤`, 'blue')

    const response = await fetch(TTS_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        text: text,
        lang: language,
      }),
    })

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`)
    }

    log(`‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç API`, 'green')

    // –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ –∫–∞–∫ ArrayBuffer
    const audioBuffer = await response.arrayBuffer()
    
    if (!audioBuffer || audioBuffer.byteLength === 0) {
      throw new Error('API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –∞—É–¥–∏–æ —Ñ–∞–π–ª')
    }

    log(`‚úÖ –ê—É–¥–∏–æ –ø–æ–ª—É—á–µ–Ω–æ (${(audioBuffer.byteLength / 1024).toFixed(2)} KB)`, 'green')

    return Buffer.from(audioBuffer)
  } catch (error) {
    throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ TTS: ${error.message}`)
  }
}

async function main() {
  const args = process.argv.slice(2)

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
  if (args.length < 2) {
    log('\n‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤\n', 'red')
    showUsage()
    process.exit(1)
  }

  const inputFile = args[0]
  const language = args[1]
  const outputFile = args[2] || 'output.mp3'

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–∑—ã–∫–∞
  if (!SUPPORTED_LANGUAGES.includes(language)) {
    log(`\n‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫ "${language}"`, 'red')
    log(`   –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏: ${SUPPORTED_LANGUAGES.join(', ')}\n`, 'yellow')
    process.exit(1)
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  if (!fs.existsSync(inputFile)) {
    log(`\n‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª "${inputFile}" –Ω–µ –Ω–∞–π–¥–µ–Ω\n`, 'red')
    process.exit(1)
  }

  try {
    log('\n' + '='.repeat(50), 'cyan')
    log('üéµ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TTS –ê—É–¥–∏–æ', 'cyan')
    log('='.repeat(50), 'cyan')

    // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞
    log(`\nüìñ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ${inputFile}`, 'blue')
    const text = fs.readFileSync(inputFile, 'utf-8').trim()

    if (!text) {
      log('‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π\n', 'red')
      process.exit(1)
    }

    log(`‚úÖ –¢–µ–∫—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω (${text.length} —Å–∏–º–≤–æ–ª–æ–≤)`, 'green')

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ
    const audioBuffer = await generateTTS(text, language)

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏)
    const outputPath = path.resolve(process.cwd(), outputFile)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    log(`\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞: ${outputPath}`, 'blue')
    fs.writeFileSync(outputPath, audioBuffer)

    log(`\n‚ú® –ì–æ—Ç–æ–≤–æ!`, 'green')
    log(`   –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${outputPath}`, 'green')
    log(`   –†–∞–∑–º–µ—Ä: ${(audioBuffer.length / 1024).toFixed(2)} KB`, 'green')
    log('\n' + '='.repeat(50) + '\n', 'cyan')

  } catch (error) {
    log(`\n‚ùå –û—à–∏–±–∫–∞: ${error.message}\n`, 'red')
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫
main()
