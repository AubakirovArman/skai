/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ PDF
 * –ó–∞–ø—É—Å–∫: node scripts/view-pdf-content.js
 */

const fs = require('fs')

async function viewPDFContent() {
  try {
    console.log('üîç Viewing PDF structure...\n')

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π PDF
    const response = await fetch('http://localhost:3000/api/export-pdf', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        vnd: '**–í–ù–î: –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´**\n–≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –ù–ï –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ PDF.',
        np: '**–ù–ü–ê: –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´**\n–≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç —Ç–∞–∫–∂–µ –ù–ï –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ PDF.',
        summary: `**–ü–£–ù–ö–¢ –ü–û–í–ï–°–¢–ö–ò –î–ù–Ø:** –û–± —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ–ª–æ–∂–µ–Ω–∏—è –æ –°–æ–≤–µ—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤

**–†–ï–®–ï–ù–ò–ï –ù–ï–ó–ê–í–ò–°–ò–ú–û–ì–û –ß–õ–ï–ù–ê –°–î:** –ó–ê - –µ–¥–∏–Ω–æ–≥–ª–∞—Å–Ω–æ

**–ö–†–ê–¢–ö–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:** –ü–æ–ª–æ–∂–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –±–µ–∑ –∑–∞–º–µ—á–∞–Ω–∏–π.

**–û–ë–û–°–ù–û–í–ê–ù–ò–ï:** –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.

**–ò–¢–û–ì–û–í–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:** –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Å–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞.`,
        fileName: 'test-document',
        language: 'ru'
      })
    })

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}`)
    }

    const data = await response.json()
    console.log('‚úÖ PDF generated:', data.pdfId)
    console.log('üìè Size:', data.size, 'bytes\n')

    // –°–∫–∞—á–∏–≤–∞–µ–º PDF
    const downloadResponse = await fetch(data.downloadUrl)
    const pdfBuffer = await downloadResponse.arrayBuffer()
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    const tempFile = '/tmp/test-analysis.pdf'
    fs.writeFileSync(tempFile, Buffer.from(pdfBuffer))
    console.log('üíæ PDF saved to:', tempFile)

    // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é strings (—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ macOS)
    const { execSync } = require('child_process')
    
    try {
      console.log('\nüìÑ Extracting text from PDF...\n')
      const text = execSync(`strings "${tempFile}" | grep -i -E "(—Ä–µ—à–µ–Ω–∏–µ|–ø—É–Ω–∫—Ç|–∑–∞–∫–ª—é—á–µ–Ω–∏–µ|–≤–Ω–¥|–Ω–ø–∞|–¥–æ–∫—É–º–µ–Ω—Ç)" | head -30`).toString()
      console.log('Found keywords:')
      console.log('‚îÄ'.repeat(80))
      console.log(text)
      console.log('‚îÄ'.repeat(80))
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –í–ù–î –∏ –ù–ü–ê –ù–ï –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
      const hasVND = text.toLowerCase().includes('–≤–Ω–¥:') || text.toLowerCase().includes('–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ')
      const hasNPA = text.toLowerCase().includes('–Ω–ø–∞:') || text.toLowerCase().includes('–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ-–ø—Ä–∞–≤–æ–≤—ã–µ')
      const hasSummary = text.toLowerCase().includes('—Ä–µ—à–µ–Ω–∏–µ') || text.toLowerCase().includes('–∑–∞–∫–ª—é—á–µ–Ω–∏–µ')
      
      console.log('\n‚úÖ Validation:')
      console.log(`  - Has Summary content: ${hasSummary ? '‚úì' : '‚úó'}`)
      console.log(`  - Has VND section: ${hasVND ? '‚úó (should not be present!)' : '‚úì (correctly removed)'}`)
      console.log(`  - Has NPA section: ${hasNPA ? '‚úó (should not be present!)' : '‚úì (correctly removed)'}`)
      
      if (!hasVND && !hasNPA && hasSummary) {
        console.log('\nüéâ PDF contains only Summary content as expected!')
      } else {
        console.log('\n‚ö†Ô∏è  PDF structure might need review')
      }
      
    } catch (error) {
      console.log('‚ÑπÔ∏è  Could not extract text (strings command might not be available)')
      console.log('   But PDF was generated successfully!')
    }

    console.log('\nüí° To view the PDF:')
    console.log(`   open ${tempFile}`)

  } catch (error) {
    console.error('‚ùå Error:', error.message)
  }
}

viewPDFContent()
