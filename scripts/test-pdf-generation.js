/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 * –ó–∞–ø—É—Å–∫: node scripts/test-pdf-generation.js
 */

async function testPDFGeneration() {
  try {
    console.log('üß™ Testing PDF generation...\n')

    const testData = {
      vnd: '**–í–ù–î: –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´**\n–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF.',
      np: '**–ù–ü–ê: –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´**\n–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.',
      summary: '**–ü–£–ù–ö–¢ –ü–û–í–ï–°–¢–ö–ò –î–ù–Ø:** –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç\n\n**–†–ï–®–ï–ù–ò–ï:** –ó–ê\n\n**–ö–†–ê–¢–ö–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:** –í—Å–µ —Ö–æ—Ä–æ—à–æ.',
      fileName: 'test-document',
      language: 'ru'
    }

    console.log('üì§ Sending POST request to /api/export-pdf...')
    const startTime = Date.now()

    const response = await fetch('http://localhost:3000/api/export-pdf', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testData)
    })

    const duration = Date.now() - startTime

    console.log(`\nüìä Response status: ${response.status} ${response.statusText}`)
    console.log(`‚è±Ô∏è  Duration: ${duration}ms`)
    console.log(`üì¶ Content-Type: ${response.headers.get('content-type')}`)

    if (!response.ok) {
      const errorText = await response.text()
      console.error('‚ùå Error response:', errorText)
      return
    }

    const data = await response.json()
    console.log('\n‚úÖ Response data:')
    console.log('  - success:', data.success)
    console.log('  - pdfId:', data.pdfId)
    console.log('  - downloadUrl:', data.downloadUrl)
    console.log('  - size:', data.size, 'bytes')

    // –¢–µ–ø–µ—Ä—å –ø—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å PDF
    console.log('\nüì• Testing PDF download...')
    const downloadResponse = await fetch(data.downloadUrl)
    
    console.log(`\nüìä Download status: ${downloadResponse.status} ${downloadResponse.statusText}`)
    console.log(`üì¶ Content-Type: ${downloadResponse.headers.get('content-type')}`)
    console.log(`üìè Content-Length: ${downloadResponse.headers.get('content-length')}`)

    if (downloadResponse.ok) {
      const pdfBuffer = await downloadResponse.arrayBuffer()
      console.log(`‚úÖ PDF downloaded: ${pdfBuffer.byteLength} bytes`)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ PDF
      const header = new Uint8Array(pdfBuffer.slice(0, 4))
      const isPDF = header[0] === 0x25 && header[1] === 0x50 && header[2] === 0x44 && header[3] === 0x46 // %PDF
      console.log(`‚úÖ Is valid PDF: ${isPDF}`)
      
      if (isPDF) {
        console.log('\nüéâ PDF generation and download working correctly!')
      } else {
        console.log('\n‚ö†Ô∏è  Downloaded file is not a valid PDF!')
      }
    } else {
      const errorText = await downloadResponse.text()
      console.error('‚ùå Download failed:', errorText)
    }

  } catch (error) {
    console.error('‚ùå Error:', error.message)
    console.error('\nüí° Possible issues:')
    console.error('   - Next.js server is not running (check: http://localhost:3000)')
    console.error('   - PDF generation library issues')
    console.error('   - Memory issues')
  }
}

testPDFGeneration()
