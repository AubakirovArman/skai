#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 *   node scripts/test-auth.js <url> <username> <password>
 * 
 * –ü—Ä–∏–º–µ—Ä—ã:
 *   node scripts/test-auth.js https://app4.sk-ai.kz admin admin
 *   node scripts/test-auth.js http://localhost:3001 admin admin
 */

const args = process.argv.slice(2)

if (args.length < 3) {
  console.log('\n‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤\n')
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:')
  console.log('  node scripts/test-auth.js <url> <username> <password>\n')
  console.log('–ü—Ä–∏–º–µ—Ä—ã:')
  console.log('  node scripts/test-auth.js https://app4.sk-ai.kz admin admin')
  console.log('  node scripts/test-auth.js http://localhost:3001 admin admin\n')
  process.exit(1)
}

const [baseUrl, username, password] = args

async function testAuth() {
  try {
    console.log('\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...')
    console.log('‚îÄ'.repeat(50))
    console.log(`üåê URL: ${baseUrl}`)
    console.log(`üë§ Username: ${username}`)
    console.log(`üîë Password: ${'*'.repeat(password.length)}`)
    console.log('‚îÄ'.repeat(50))

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    console.log('\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...')
    try {
      const healthCheck = await fetch(baseUrl)
      console.log(`   ‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω (${healthCheck.status})`)
    } catch (error) {
      console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`)
    }

    // 2. –ü–æ–ª—É—á–∞–µ–º CSRF —Ç–æ–∫–µ–Ω
    console.log('\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ CSRF —Ç–æ–∫–µ–Ω...')
    const csrfUrl = `${baseUrl}/api/auth/csrf`
    console.log(`   URL: ${csrfUrl}`)
    
    const csrfResponse = await fetch(csrfUrl)
    const csrfData = await csrfResponse.json()
    
    if (csrfData.csrfToken) {
      console.log(`   ‚úÖ CSRF —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: ${csrfData.csrfToken.substring(0, 20)}...`)
    } else {
      console.log(`   ‚ùå CSRF —Ç–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω`)
      console.log(`   –û—Ç–≤–µ—Ç:`, csrfData)
    }

    // 3. –ü—Ä–æ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
    console.log('\n3Ô∏è‚É£ –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...')
    const authUrl = `${baseUrl}/api/auth/callback/credentials`
    console.log(`   URL: ${authUrl}`)

    const authResponse = await fetch(authUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        username: username,
        password: password,
        csrfToken: csrfData.csrfToken,
        callbackUrl: `${baseUrl}/`,
        json: true,
      }),
      redirect: 'manual', // –ù–µ —Å–ª–µ–¥–æ–≤–∞—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞–º
    })

    console.log(`   –°—Ç–∞—Ç—É—Å: ${authResponse.status} ${authResponse.statusText}`)
    console.log(`   Headers:`)
    authResponse.headers.forEach((value, key) => {
      console.log(`     ${key}: ${value}`)
    })

    if (authResponse.status === 401) {
      console.log('\n   ‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å (401 Unauthorized)')
      console.log('   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:')
      console.log('   - –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å')
      console.log('   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î')
      console.log('   - –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–∞—Ä–æ–ª—è')
      console.log('   - –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ')
    } else if (authResponse.status === 200 || authResponse.status === 302) {
      console.log('\n   ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!')
      
      const responseText = await authResponse.text()
      if (responseText) {
        try {
          const responseData = JSON.parse(responseText)
          console.log('   –û—Ç–≤–µ—Ç:', responseData)
        } catch {
          console.log('   –û—Ç–≤–µ—Ç (—Ç–µ–∫—Å—Ç):', responseText.substring(0, 200))
        }
      }
    } else {
      console.log(`\n   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${authResponse.status}`)
      const responseText = await authResponse.text()
      console.log('   –û—Ç–≤–µ—Ç:', responseText.substring(0, 500))
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...')
    console.log('   üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:')
    console.log('   - NEXTAUTH_SECRET (–ª—é–±–∞—è —Å–µ–∫—Ä–µ—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞)')
    console.log('   - NEXTAUTH_URL (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å https://app4.sk-ai.kz)')
    console.log('   - DATABASE_URL (–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL)')

    console.log('\n' + '‚îÄ'.repeat(50))
    console.log('‚ú® –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω\n')

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞:', error.message)
    console.error('Stack:', error.stack)
  }
}

testAuth()
