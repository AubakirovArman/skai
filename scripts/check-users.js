#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–æ–ª–∏
 */

const { PrismaClient } = require('@prisma/client')
const bcrypt = require('bcryptjs')

const prisma = new PrismaClient()

async function checkUsers() {
  try {
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n')

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await prisma.user.findMany({
      select: {
        id: true,
        email: true,
        name: true,
        role: true,
        password: true,
        createdAt: true,
      }
    })

    if (users.length === 0) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
      console.log('\nüí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é —Å–∫—Ä–∏–ø—Ç–∞ create-admin.js')
      return
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}\n`)

    for (const user of users) {
      console.log('‚îÄ'.repeat(50))
      console.log(`üìß Email: ${user.email}`)
      console.log(`üë§ –ò–º—è: ${user.name || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`)
      console.log(`üîë –†–æ–ª—å: ${user.role}`)
      console.log(`üìÖ –°–æ–∑–¥–∞–Ω: ${user.createdAt.toLocaleString('ru-RU')}`)
      console.log(`üîí –ü–∞—Ä–æ–ª—å: ${user.password ? '–µ—Å—Ç—å (—Ö–µ—à)' : '–ù–ï–¢'}`)
      
      if (user.password) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π –ø–∞—Ä–æ–ª—å –º–æ–∂–µ—Ç –ø–æ–¥–æ–π—Ç–∏
        const testPasswords = ['admin', 'password', '123456', 'admin123']
        for (const testPass of testPasswords) {
          const isMatch = await bcrypt.compare(testPass, user.password)
          if (isMatch) {
            console.log(`   ‚úÖ –ü–∞—Ä–æ–ª—å: "${testPass}"`)
            break
          }
        }
      }
      console.log()
    }

    console.log('‚îÄ'.repeat(50))

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞:', error.message)
  } finally {
    await prisma.$disconnect()
  }
}

checkUsers()
